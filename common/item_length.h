#ifndef __INC_METIN2_ITEM_LENGTH_H__
#define __INC_METIN2_ITEM_LENGTH_H__

#include "CommonDefines.h"

enum EItemMisc
{
#ifdef ENABLE_PROTO_RENEWAL_CUSTOM
	ITEM_NAME_MAX_LEN = 64,	//@fixme411
#else
	ITEM_NAME_MAX_LEN = 40,
#endif
	ITEM_VALUES_MAX_NUM			= 6,
	ITEM_SMALL_DESCR_MAX_LEN	= 256,
	ITEM_LIMIT_MAX_NUM			= 2,
#ifdef ENABLE_PROTO_RENEWAL
	ITEM_APPLY_MAX_NUM			= 4,
#else
	ITEM_APPLY_MAX_NUM			= 3,
#endif
#ifdef ENABLE_PROTO_RENEWAL
	ITEM_SOCKET_MAX_NUM			= 6,
	METIN_SOCKET_MAX_NUM		= 3,
#else
	ITEM_SOCKET_MAX_NUM			= 3,
#endif
	ITEM_MAX_COUNT				= 10000,
	// ITEM_MAX_COUNT				= 200,

	ITEM_ATTRIBUTE_NORM_NUM		= 5,
	ITEM_ATTRIBUTE_RARE_NUM		= 2,

	ITEM_ATTRIBUTE_NORM_START	= 0,
	ITEM_ATTRIBUTE_NORM_END		= ITEM_ATTRIBUTE_NORM_START + ITEM_ATTRIBUTE_NORM_NUM,

	ITEM_ATTRIBUTE_RARE_START	= ITEM_ATTRIBUTE_NORM_END,
	ITEM_ATTRIBUTE_RARE_END		= ITEM_ATTRIBUTE_RARE_START + ITEM_ATTRIBUTE_RARE_NUM,

	ITEM_ATTRIBUTE_MAX_NUM		= ITEM_ATTRIBUTE_RARE_END, // 7

#ifdef ENABLE_YOHARA_SYSTEM
	APPLY_RANDOM_SLOT_MAX_NUM	= 3,
	ITEM_RANDOM_VALUES_MAX_NUM	= 4,
#endif
#ifdef ENABLE_ATTR_6TH_7TH_ATTR_TABLE
	ITEM_ATTRIBUTE_MAX_LEVEL	= 10,
#else
	ITEM_ATTRIBUTE_MAX_LEVEL	= 5,
#endif

	ITEM_AWARD_WHY_MAX_LEN		= 50,

	REFINE_MATERIAL_MAX_NUM		= 5,

	ITEM_ELK_VNUM				= 50026,
};

#ifdef ENABLE_PREMIUM_PRIVATE_SHOP
enum EPrivateShop
{
#ifdef ENABLE_MYSHOP_DECO
	/*	SHOP_GRID_WIDTH = 8,
	SHOP_GRID_HEIGHT = 10,*/

	SHOP_GRID_WIDTH = 10,
	SHOP_GRID_HEIGHT = 9,
#else
	SHOP_GRID_WIDTH = 5,
	SHOP_GRID_HEIGHT = 9,
#endif

	SHOP_INVENTORY_PAGE_SIZE = SHOP_GRID_HEIGHT * SHOP_GRID_WIDTH,
	SHOP_INVENTORY_MAX_NUM = SHOP_INVENTORY_PAGE_SIZE,
};
#endif

constexpr uint8_t ITEM_SOCKET_REMAIN_SEC = 0;
enum EItemValueIdice
{
	ITEM_VALUE_DRAGON_SOUL_POLL_OUT_BONUS_IDX = 0,
	ITEM_VALUE_CHARGING_AMOUNT_IDX = 0,
	ITEM_VALUE_SECONDARY_COIN_UNIT_IDX = 0,
};

enum EItemDragonSoulSockets
{
	ITEM_SOCKET_DRAGON_SOUL_ACTIVE_IDX = 2,
	ITEM_SOCKET_CHARGING_AMOUNT_IDX = 2,
};

enum EItemUniqueSockets
{
#ifdef ENABLE_PROTO_RENEWAL
	ITEM_SOCKET_UNIQUE_SAVE_TIME = METIN_SOCKET_MAX_NUM - 2,
	ITEM_SOCKET_UNIQUE_REMAIN_TIME = METIN_SOCKET_MAX_NUM - 1
#else
	ITEM_SOCKET_UNIQUE_SAVE_TIME = ITEM_SOCKET_MAX_NUM - 2,
	ITEM_SOCKET_UNIQUE_REMAIN_TIME = ITEM_SOCKET_MAX_NUM - 1
#endif
};

enum EItemTypes
{
	ITEM_NONE,				//0
	ITEM_WEAPON,			//1
	ITEM_ARMOR,				//2
	ITEM_USE,				//3
	ITEM_AUTOUSE,			//4
	ITEM_MATERIAL,			//5
	ITEM_SPECIAL,			//6
	ITEM_TOOL,				//7
	ITEM_LOTTERY,			//8
	ITEM_ELK,				//9
	ITEM_METIN,				//10
	ITEM_CONTAINER,			//11
	ITEM_FISH,				//12
	ITEM_ROD,				//13
	ITEM_RESOURCE,			//14
	ITEM_CAMPFIRE,			//15
	ITEM_UNIQUE,			//16
	ITEM_SKILLBOOK,			//17
	ITEM_QUEST,				//18
	ITEM_POLYMORPH,			//19
	ITEM_TREASURE_BOX,		//20
	ITEM_TREASURE_KEY,		//21
	ITEM_SKILLFORGET,		//22
	ITEM_GIFTBOX,			//23
	ITEM_PICK,				//24
	ITEM_HAIR,				//25
	ITEM_TOTEM,				//26
	ITEM_BLEND,				//27
	ITEM_COSTUME,			//28
	ITEM_DS,				//29
	ITEM_SPECIAL_DS,		//30
	ITEM_EXTRACT,			//31
	ITEM_SECONDARY_COIN,	//32
	ITEM_RING,				//33
	ITEM_BELT,				//34
	ITEM_PET,				//35	ENABLE_PET_SYSTEM
	ITEM_MEDIUM,			//36	ENABLE_MOVE_COSTUME_ATTR
	ITEM_GACHA,				//37	ENABLE_BATTLE_FIELD
	ITEM_SOUL,				//38	ENABLE_SOUL_SYSTEM
	ITEM_PASSIVE,			//39	ENABLE_PASSIVE_SYSTEM
};

enum EMetinSubTypes
{
	METIN_NORMAL,
	METIN_GOLD,
#if defined(ENABLE_PROTO_RENEWAL) && defined(ENABLE_YOHARA_SYSTEM)
	METIN_SUNGMA,
#endif
};

enum EWeaponSubTypes
{
	WEAPON_SWORD,
	WEAPON_DAGGER,
	WEAPON_BOW,
	WEAPON_TWO_HANDED,
	WEAPON_BELL,
	WEAPON_FAN,
	WEAPON_ARROW,
	WEAPON_MOUNT_SPEAR,
	WEAPON_CLAW,	//ENABLE_WOLFMAN_CHARACTER
	WEAPON_QUIVER,	//ENABLE_QUIVER_SYSTEM
	WEAPON_BOUQUET,
	WEAPON_NUM_TYPES,
};

enum EArmorSubTypes
{
	ARMOR_BODY,
	ARMOR_HEAD,
	ARMOR_SHIELD,
	ARMOR_WRIST,
	ARMOR_FOOTS,
	ARMOR_NECK,
	ARMOR_EAR,
	ARMOR_PENDANT,	//ENABLE_PENDANT
#ifdef ENABLE_GLOVE_SYSTEM
	ARMOR_GLOVE,
#endif
	ARMOR_NUM_TYPES
};

enum ECostumeSubTypes
{
	COSTUME_BODY,	//0
	COSTUME_HAIR,	//1
	COSTUME_MOUNT,	//2	ENABLE_MOUNT_COSTUME_SYSTEM
	COSTUME_ACCE,	//3	ENABLE_ACCE_COSTUME_SYSTEM
	COSTUME_WEAPON,	//4	ENABLE_WEAPON_COSTUME_SYSTEM
	COSTUME_AURA,	//5	ENABLE_AURA_SYSTEM
	COSTUME_NUM_TYPES,
};

enum EDragonSoulSubType
{
	DS_SLOT1,
	DS_SLOT2,
	DS_SLOT3,
	DS_SLOT4,
	DS_SLOT5,
	DS_SLOT6,
	DS_SLOT7,
	DS_SLOT_MAX,
};

enum EDragonSoulGradeTypes
{
	DRAGON_SOUL_GRADE_NORMAL,
	DRAGON_SOUL_GRADE_BRILLIANT,
	DRAGON_SOUL_GRADE_RARE,
	DRAGON_SOUL_GRADE_ANCIENT,
	DRAGON_SOUL_GRADE_LEGENDARY,
	DRAGON_SOUL_GRADE_MYTH,	//ENABLE_DS_GRADE_MYTH
	DRAGON_SOUL_GRADE_MAX,
};

enum EDragonSoulStepTypes
{
	DRAGON_SOUL_STEP_LOWEST,
	DRAGON_SOUL_STEP_LOW,
	DRAGON_SOUL_STEP_MID,
	DRAGON_SOUL_STEP_HIGH,
	DRAGON_SOUL_STEP_HIGHEST,
	DRAGON_SOUL_STEP_MAX,
};
#define DRAGON_SOUL_STRENGTH_MAX 7

enum EDSInventoryMaxNum
{
	DRAGON_SOUL_INVENTORY_MAX_NUM = DS_SLOT_MAX * DRAGON_SOUL_GRADE_MAX * DRAGON_SOUL_BOX_SIZE,
};

enum EFishSubTypes
{
	FISH_ALIVE,
	FISH_DEAD,
};

enum EResourceSubTypes
{
	RESOURCE_FISHBONE,
	RESOURCE_WATERSTONEPIECE,
	RESOURCE_WATERSTONE,
	RESOURCE_BLOOD_PEARL,
	RESOURCE_BLUE_PEARL,
	RESOURCE_WHITE_PEARL,
	RESOURCE_BUCKET,
	RESOURCE_CRYSTAL,
	RESOURCE_GEM,
	RESOURCE_STONE,
	RESOURCE_METIN,
	RESOURCE_ORE,
	RESOURCE_AURA,	//ENABLE_AURA_SYSTEM
};

enum EUniqueSubTypes
{
	UNIQUE_NONE,
	UNIQUE_BOOK,
	UNIQUE_SPECIAL_RIDE,
	UNIQUE_SPECIAL_MOUNT_RIDE,
	UNIQUE_4,
	UNIQUE_5,
	UNIQUE_6,
	UNIQUE_7,
	UNIQUE_8,
	UNIQUE_9,
#ifdef ENABLE_PROTO_RENEWAL
	UNIQUE_10 // changed USE_SPECIAL to UNIQUE_10 (USE_SPECIAL used in arSub3, this is arSub16)
#else
	USE_SPECIAL
#endif
};

enum EUseSubTypes
{
	USE_POTION,						// 0
	USE_TALISMAN,					// 1
	USE_TUNING,						// 2
	USE_MOVE,						// 3
	USE_TREASURE_BOX,				// 4
	USE_MONEYBAG,					// 5
	USE_BAIT,						// 6
	USE_ABILITY_UP,					// 7
	USE_AFFECT,						// 8
	USE_CREATE_STONE,				// 9
	USE_SPECIAL,					// 10
	USE_POTION_NODELAY,				// 11
	USE_CLEAR,						// 12
	USE_INVISIBILITY,				// 13
	USE_DETACHMENT,					// 14
	USE_BUCKET,						// 15
	USE_POTION_CONTINUE,			// 16
	USE_CLEAN_SOCKET,				// 17
	USE_CHANGE_ATTRIBUTE,			// 18
	USE_ADD_ATTRIBUTE,				// 19
	USE_ADD_ACCESSORY_SOCKET,		// 20
	USE_PUT_INTO_ACCESSORY_SOCKET,	// 21
	USE_ADD_ATTRIBUTE2,				// 22
	USE_RECIPE,						// 23
	USE_CHANGE_ATTRIBUTE2,			// 24
	USE_BIND,						// 25	ENABLE_SEALBIND_SYSTEM
	USE_UNBIND,						// 26	ENABLE_SEALBIND_SYSTEM
	USE_TIME_CHARGE_PER,			// 27
	USE_TIME_CHARGE_FIX,			// 28
	USE_PUT_INTO_BELT_SOCKET,		// 29
	USE_PUT_INTO_RING_SOCKET,		// 30
	USE_CHANGE_COSTUME_ATTR,		// 31
	USE_RESET_COSTUME_ATTR,			// 32
#ifdef ENABLE_PROTO_RENEWAL
	USE_UNK_33,						// 33
	USE_SELECT_ATTRIBUTE,			// 34 ENABLE_CHANGED_ATTR
	USE_FLOWER,						// 35 ENABLE_FLOWER_EVENT
	USE_EMOTION_PACK,				// 36 ENABLE_EXPRESSING_EMOTION
	USE_ELEMENT_UPGRADE,			// 37 ENABLE_REFINE_ELEMENT
	USE_ELEMENT_DOWNGRADE,			// 38 ENABLE_REFINE_ELEMENT
	USE_ELEMENT_CHANGE,				// 39 ENABLE_REFINE_ELEMENT
	USE_CALL,						// 40
	USE_POTION_TOWER,				// 41
	USE_POTION_NODELAY_TOWER,		// 42
	USE_REMOVE_AFFECT,				// 43
	USE_EMOTION_TOWER,				// 44
	USE_SECRET_DUNGEON_SCROLL,		// 45
#endif

	// Custom
	USE_AGGREGATE_MONSTER,
#if defined(ENABLE_AURA_SYSTEM) && defined(ENABLE_AURA_BOOST)
	USE_PUT_INTO_AURA_SOCKET,		// ENABLE_AURA_SYSTEM AURA_BOOSTER
#endif
};

#ifdef ENABLE_PROTO_RENEWAL
enum EQuestSubType
{
	QUEST_NONE,
	UNK18_1,
	QUEST_WARP,
	UNK18_3,
	UNK18_4,
	UNK18_5,
	UNK18_6,
	UNK18_7,
	UNK18_8,
	UNK18_9,
	UNK18_10
};
#endif

enum ESoulSubType
{
	RED_SOUL,
	BLUE_SOUL
};

#if defined(ENABLE_PROTO_RENEWAL) || defined(ENABLE_PASSIVE_SYSTEM)
enum EPassiveSubType
{
	PASSIVE_JOB,
};
#endif

#ifdef ENABLE_SOUL_SYSTEM
enum ESoulGrade
{
	BASIC_SOUL = 1,
	GLEAMING_SOUL = 2,
	LUSTROUS_SOUL = 3,
	PRISMATIC_SOUL = 4,
	ILUMINED_SOUL = 5,
};

enum ESoulRefine
{
	SOUL_REFINE_SET = 10000,
	SOUL_REFINE_EVOLVE_PROB = 100,
	SOUL_REFINE_AWAKE_PROB = 60,
	SOUL_REFINE_COST = 0
};
#endif

#ifdef ENABLE_MOVE_COSTUME_ATTR
enum EMoveCostumeAttrTypes
{
	MEDIUM_MOVE_COSTUME_ATTR,
#	ifdef ENABLE_MOVE_COSTUME_ACCE_ATTR
	MEDIUM_MOVE_ACCE_ATTR
#	endif
};
#endif

#if defined(ENABLE_PROTO_RENEWAL) || defined(ENABLE_BATTLE_FIELD)
enum EGachaSubTypes
{
	USE_GACHA,
	GEM_LUCKY_BOX_GACHA,
	SPECIAL_LUCKY_BOX_GACHA
};
#endif

#ifdef ENABLE_ACCE_COSTUME_SYSTEM
enum EAcceInfo
{
	ACCE_ABSORPTION_APPLY = 0,
	ACCE_ABSORBED_SOCKET = 0,
	ACCE_EFFECT_FROM_ABS = 19,

	ACCE_COMBINE_GRADE_1 = 80,
	ACCE_COMBINE_GRADE_2 = 70,
	ACCE_COMBINE_GRADE_3 = 50,
	ACCE_COMBINE_GRADE_4 = 30,
};
#endif

#ifdef ENABLE_AURA_SYSTEM
enum EItemAuraSockets
{
	ITEM_SOCKET_AURA_DRAIN_ITEM_VNUM,
	ITEM_SOCKET_AURA_CURRENT_LEVEL,
	ITEM_SOCKET_AURA_BOOST,
};

enum EItemAuraMaterialValues
{
	ITEM_AURA_MATERIAL_EXP_VALUE,
};

enum EItemAuraBoostValues
{
	ITEM_AURA_BOOST_PERCENT_VALUE,
	ITEM_AURA_BOOST_TIME_VALUE,
	ITEM_AURA_BOOST_UNLIMITED_VALUE,
};

enum EItemAuraBoostIndex
{
	ITEM_AURA_BOOST_ERASER,
	ITEM_AURA_BOOST_WEAK,
	ITEM_AURA_BOOST_NORMAL,
	ITEM_AURA_BOOST_STRONG,
	ITEM_AURA_BOOST_ULTIMATE,
	ITEM_AURA_BOOST_MAX,
};
#endif

enum EExtractSubTypes
{
	EXTRACT_DRAGON_SOUL,
	EXTRACT_DRAGON_HEART,
};

enum EAutoUseSubTypes
{
	AUTOUSE_POTION,
	AUTOUSE_ABILITY_UP,
	AUTOUSE_BOMB,
	AUTOUSE_GOLD,
	AUTOUSE_MONEYBAG,
	AUTOUSE_TREASURE_BOX
};

enum EMaterialSubTypes
{
	MATERIAL_LEATHER,
	MATERIAL_BLOOD,
	MATERIAL_ROOT,
	MATERIAL_NEEDLE,
	MATERIAL_JEWEL,
	MATERIAL_DS_REFINE_NORMAL,
	MATERIAL_DS_REFINE_BLESSED,
	MATERIAL_DS_REFINE_HOLLY,
#ifdef ENABLE_PROTO_RENEWAL
	MATERIAL_DS_CHANGE_ATTR,
	MATERIAL_PASSIVE_WEAPON,
	MATERIAL_PASSIVE_ARMOR,
	MATERIAL_PASSIVE_ACCE,
	MATERIAL_PASSIVE_ELEMENT,
	UNK5_13,
	UNK5_14,
	UNK5_15,
	UNK5_16,
	UNK5_17,
	UNK5_18,
	UNK5_19,
	UNK5_20,
	UNK5_21,
	UNK5_22,
	UNK5_23,
	UNK5_24,
	UNK5_25,
	UNK5_26,
	UNK5_27,
	UNK5_28,
	UNK5_29,
	UNK5_30,
	UNK5_31,
	UNK5_32,
	UNK5_33,
	UNK5_34,
	UNK5_35,
	UNK5_36,
	UNK5_37,
	UNK5_38,
	UNK5_39
#endif
};

enum ESpecialSubTypes
{
	SPECIAL_MAP,
	SPECIAL_KEY,
	SPECIAL_DOC,
	SPECIAL_SPIRIT,
};

enum EToolSubTypes
{
	TOOL_FISHING_ROD
};

enum ELotterySubTypes
{
	LOTTERY_TICKET,
	LOTTERY_INSTANT
};

enum EItemFlag
{
	ITEM_FLAG_REFINEABLE		= (1 << 0),
	ITEM_FLAG_SAVE				= (1 << 1),
	ITEM_FLAG_STACKABLE			= (1 << 2),
	ITEM_FLAG_COUNT_PER_1GOLD	= (1 << 3),
	ITEM_FLAG_SLOW_QUERY		= (1 << 4),
	ITEM_FLAG_UNIQUE			= (1 << 5),
	ITEM_FLAG_MAKECOUNT			= (1 << 6),
	ITEM_FLAG_IRREMOVABLE		= (1 << 7),
	ITEM_FLAG_CONFIRM_WHEN_USE	= (1 << 8),
	ITEM_FLAG_QUEST_USE			= (1 << 9),
	ITEM_FLAG_QUEST_USE_MULTIPLE = (1 << 10),
	ITEM_FLAG_QUEST_GIVE		= (1 << 11),
	ITEM_FLAG_LOG				= (1 << 12),
	ITEM_FLAG_APPLICABLE		= (1 << 13),
	ITEM_FLAG_GROUP_DMG_WEAPON	= (1 << 14),
};

enum EItemAntiFlag
{
	ITEM_ANTIFLAG_FEMALE		= (1 << 0),
	ITEM_ANTIFLAG_MALE			= (1 << 1),
	ITEM_ANTIFLAG_WARRIOR		= (1 << 2),
	ITEM_ANTIFLAG_ASSASSIN		= (1 << 3),
	ITEM_ANTIFLAG_SURA			= (1 << 4),
	ITEM_ANTIFLAG_SHAMAN		= (1 << 5),
	ITEM_ANTIFLAG_GET			= (1 << 6),
	ITEM_ANTIFLAG_DROP			= (1 << 7),
	ITEM_ANTIFLAG_SELL			= (1 << 8),
	ITEM_ANTIFLAG_EMPIRE_A		= (1 << 9),
	ITEM_ANTIFLAG_EMPIRE_B		= (1 << 10),
	ITEM_ANTIFLAG_EMPIRE_C		= (1 << 11),
	ITEM_ANTIFLAG_SAVE			= (1 << 12),
	ITEM_ANTIFLAG_GIVE			= (1 << 13),
	ITEM_ANTIFLAG_PKDROP		= (1 << 14),
	ITEM_ANTIFLAG_STACK			= (1 << 15),
	ITEM_ANTIFLAG_MYSHOP		= (1 << 16),
	ITEM_ANTIFLAG_SAFEBOX		= (1 << 17),
	ITEM_ANTIFLAG_WOLFMAN		= (1 << 18),	//ENABLE_WOLFMAN_CHARACTER
#ifdef ENABLE_PROTO_RENEWAL
	ITEM_ANTIFLAG_RT_REMOVE		= (1 << 19),
	ITEM_ANTIFLAG_QUICKSLOT		= (1 << 20),	//ENABLE_ANTI_QUICKSLOT
	ITEM_ANTIFLAG_CHANGELOOK	= (1 << 21),	//ENABLE_CHANGELOOK_SYSTEM
	ITEM_ANTIFLAG_REINFORCE		= (1 << 22),
	ITEM_ANTIFLAG_ENCHANT		= (1 << 23),
	ITEM_ANTIFLAG_ENERGY		= (1 << 24),
	ITEM_ANTIFLAG_PETFEED		= (1 << 25),	//ENABLE_GROWTH_PET_SYSTEM
	ITEM_ANTIFLAG_APPLY			= (1 << 26),
	ITEM_ANTIFLAG_ACCE			= (1 << 27),	//ENABLE_ACCE_COSTUME_SYSTEM
	ITEM_ANTIFLAG_MAIL			= (1 << 28),	//ENABLE_MAILBOX
#endif
};

enum EItemWearableFlag
{
	WEARABLE_BODY			= (1 << 0),	// 1
	WEARABLE_HEAD			= (1 << 1),	// 2
	WEARABLE_FOOTS			= (1 << 2),	// 4
	WEARABLE_WRIST			= (1 << 3),	// 8
	WEARABLE_WEAPON			= (1 << 4),	// 16
	WEARABLE_NECK			= (1 << 5),	// 32
	WEARABLE_EAR			= (1 << 6),	// 64
	WEARABLE_SHIELD			= (1 << 7),	// 256
	WEARABLE_UNIQUE			= (1 << 8),	// 128
	WEARABLE_ARROW			= (1 << 9),	// 512
	WEARABLE_HAIR			= (1 << 10),// 1024
	WEARABLE_ABILITY		= (1 << 11),// 2048
	WEARABLE_PENDANT		= (1 << 12),// 4096	ENABLE_PENDANT
#ifdef ENABLE_GLOVE_SYSTEM
	WEARABLE_GLOVE			= (1 << 13),// 8192
#endif
};

enum ELimitTypes
{
	LIMIT_NONE,
	LIMIT_LEVEL,
	LIMIT_STR,
	LIMIT_DEX,
	LIMIT_INT,
	LIMIT_CON,
	LIMIT_REAL_TIME,
	LIMIT_REAL_TIME_START_FIRST_USE,
	LIMIT_TIMER_BASED_ON_WEAR,
#ifdef ENABLE_PROTO_RENEWAL
	LIMIT_NEWWORLD_LEVEL,
	LIMIT_DURATION,
#endif
	LIMIT_MAX_NUM
};

enum EAttrAddonTypes
{
	ATTR_ADDON_NONE,
	// positive values are reserved for set
	ATTR_DAMAGE_ADDON = -1,
};

enum ERefineType
{
	REFINE_TYPE_NORMAL,
	REFINE_TYPE_NOT_USED1,
	REFINE_TYPE_SCROLL,
	REFINE_TYPE_HYUNIRON,
	REFINE_TYPE_MONEY_ONLY,
	REFINE_TYPE_MUSIN,
	REFINE_TYPE_BDRAGON,
#ifdef ENABLE_RITUAL_STONE
	REFINE_TYPE_RITUALS_SCROLL,
#endif
#ifdef ENABLE_SOUL_SYSTEM
	REFINE_TYPE_SOUL_EVOLVE,
	REFINE_TYPE_SOUL_AWAKE,
#endif
#ifdef ENABLE_SEAL_OF_GOD
	REFINE_TYPE_SEAL_GOD,
#endif
};

#ifdef ENABLE_PROTO_RENEWAL
enum EPetSubTypes
{
#	ifdef ENABLE_GROWTH_PET_SYSTEM
	PET_EGG,
	PET_UPBRINGING,
	PET_BAG,
	PET_FEEDSTUFF,
	PET_SKILL,
	PET_SKILL_DEL_BOOK,
	PET_NAME_CHANGE,
	PET_EXPFOOD,
	PET_SKILL_ALL_DEL_BOOK,
	PET_EXPFOOD_PER,
	PET_ITEM_TYPE,
	PET_ATTR_CHANGE,
#	endif
	PET_PAY = 12,
#ifdef ENABLE_GROWTH_PET_SYSTEM
	PET_PREMIUM_FEEDSTUFF = 13,
#endif
};
#endif

#ifdef ENABLE_PROTO_RENEWAL
enum EMaskType
{
	MASK_ITEM_TYPE_NONE, // 0
	MASK_ITEM_TYPE_MOUNT_PET, // 1
	MASK_ITEM_TYPE_EQUIPMENT_WEAPON, // 2
	MASK_ITEM_TYPE_EQUIPMENT_ARMOR, // 3
	MASK_ITEM_TYPE_EQUIPMENT_JEWELRY, // 4
	MASK_ITEM_TYPE_TUNING, // 5
	MASK_ITEM_TYPE_POTION, // 6
	MASK_ITEM_TYPE_FISHING_PICK, // 7
	MASK_ITEM_TYPE_DRAGON_STONE, // 8
	MASK_ITEM_TYPE_COSTUMES, // 9
	MASK_ITEM_TYPE_SKILL, // 10
	MASK_ITEM_TYPE_UNIQUE, // 11
	MASK_ITEM_TYPE_ETC, // 12
	MASK_ITEM_TYPE_MAX // 14
};

enum EMaskSubTypeMountPet
{
	MASK_ITEM_SUBTYPE_MOUNT_PET_MOUNT,
	MASK_ITEM_SUBTYPE_MOUNT_PET_CHARGED_PET,
	MASK_ITEM_SUBTYPE_MOUNT_PET_FREE_PET,
	MASK_ITEM_SUBTYPE_MOUNT_PET_EGG
};

enum EMaskSubTypeWeapon
{
	MASK_ITEM_SUBTYPE_WEAPON_WEAPON_SWORD,
	MASK_ITEM_SUBTYPE_WEAPON_WEAPON_DAGGER,
	MASK_ITEM_SUBTYPE_WEAPON_WEAPON_BOW,
	MASK_ITEM_SUBTYPE_WEAPON_WEAPON_TWO_HANDED,
	MASK_ITEM_SUBTYPE_WEAPON_WEAPON_BELL,
	MASK_ITEM_SUBTYPE_WEAPON_WEAPON_CLAW,
	MASK_ITEM_SUBTYPE_WEAPON_WEAPON_FAN,
	MASK_ITEM_SUBTYPE_WEAPON_WEAPON_MOUNT_SPEAR,
	MASK_ITEM_SUBTYPE_WEAPON_WEAPON_ARROW,
	MASK_ITEM_SUBTYPE_WEAPON_WEAPON_QUIVER
};

enum EMaskSubTypeArmor
{
	MASK_ITEM_SUBTYPE_ARMOR_ARMOR_BODY,
	MASK_ITEM_SUBTYPE_ARMOR_ARMOR_HEAD,
	MASK_ITEM_SUBTYPE_ARMOR_ARMOR_SHIELD,
#ifdef ENABLE_GLOVE_SYSTEM
	MASK_ITEM_SUBTYPE_ARMOR_ARMOR_GLOVE
#endif
};

enum EMaskSubTypeJewelry
{
	MASK_ITEM_SUBTYPE_JEWELRY_ARMOR_WRIST,
	MASK_ITEM_SUBTYPE_JEWELRY_ARMOR_FOOTS,
	MASK_ITEM_SUBTYPE_JEWELRY_ARMOR_NECK,
	MASK_ITEM_SUBTYPE_JEWELRY_ARMOR_EAR,
	MASK_ITEM_SUBTYPE_JEWELRY_ITEM_BELT,
	MASK_ITEM_SUBTYPE_JEWELRY_ARMOR_PENDANT,
};

enum EMaskSubTypeTuning
{
	MASK_ITEM_SUBTYPE_TUNING_RESOURCE,
	MASK_ITEM_SUBTYPE_TUNING_STONE,
	MASK_ITEM_SUBTYPE_TUNING_ETC
};

enum EMaskSubTypePotion
{
	MASK_ITEM_SUBTYPE_POTION_ABILITY,
	MASK_ITEM_SUBTYPE_POTION_HAIRDYE,
	MASK_ITEM_SUBTYPE_POTION_ETC
};

enum EMaskSubTypeFishingPick
{
	MASK_ITEM_SUBTYPE_FISHING_PICK_FISHING_POLE,
	MASK_ITEM_SUBTYPE_FISHING_PICK_EQUIPMENT_PICK,
	MASK_ITEM_SUBTYPE_FISHING_PICK_FOOD,
	MASK_ITEM_SUBTYPE_FISHING_PICK_STONE,
	MASK_ITEM_SUBTYPE_FISHING_PICK_ETC
};

enum EMaskSubTypeDragonStone
{
	MASK_ITEM_SUBTYPE_DRAGON_STONE_DRAGON_DIAMOND,
	MASK_ITEM_SUBTYPE_DRAGON_STONE_DRAGON_RUBY,
	MASK_ITEM_SUBTYPE_DRAGON_STONE_DRAGON_JADE,
	MASK_ITEM_SUBTYPE_DRAGON_STONE_DRAGON_SAPPHIRE,
	MASK_ITEM_SUBTYPE_DRAGON_STONE_DRAGON_GARNET,
	MASK_ITEM_SUBTYPE_DRAGON_STONE_DRAGON_ONYX,
	MASK_ITEM_SUBTYPE_DRAGON_STONE_DRAGON_AMETHYST,
	MASK_ITEM_SUBTYPE_DRAGON_STONE_ETC
};

enum EMaskSubTypeCostumes
{
	MASK_ITEM_SUBTYPE_COSTUMES_COSTUME_WEAPON,
	MASK_ITEM_SUBTYPE_COSTUMES_COSTUME_BODY,
	MASK_ITEM_SUBTYPE_COSTUMES_COSTUME_HAIR,
	MASK_ITEM_SUBTYPE_COSTUMES_SASH,
	MASK_ITEM_SUBTYPE_COSTUMES_ETC,
#ifdef ENABLE_AURA_SYSTEM
	MASK_ITEM_SUBTYPE_COSTUMES_AURA,
#endif
};

enum EMaskSubTypeSkill
{
	MASK_ITEM_SUBTYPE_SKILL_PAHAE,
	MASK_ITEM_SUBTYPE_SKILL_SKILL_BOOK,
	MASK_ITEM_SUBTYPE_SKILL_BOOK_OF_OBLIVION,
	MASK_ITEM_SUBTYPE_SKILL_ETC,
	MASK_ITEM_SUBTYPE_SKILL_SKILL_BOOK_HORSE
};

enum EMaskSubTypeUnique
{
	MASK_ITEM_SUBTYPE_UNIQUE_ABILITY,
	MASK_ITEM_SUBTYPE_UNIQUE_ETC
};

enum EMaskSubTypeEtc
{
	MASK_ITEM_SUBTYPE_ETC_GIFTBOX,
	MASK_ITEM_SUBTYPE_ETC_MATRIMORY,
	MASK_ITEM_SUBTYPE_ETC_EVENT,
	MASK_ITEM_SUBTYPE_ETC_SEAL,
	MASK_ITEM_SUBTYPE_ETC_PARTI,
	MASK_ITEM_SUBTYPE_ETC_POLYMORPH,
	MASK_ITEM_SUBTYPE_ETC_RECIPE,
	MASK_ITEM_SUBTYPE_ETC_ETC
};
#endif

#endif
